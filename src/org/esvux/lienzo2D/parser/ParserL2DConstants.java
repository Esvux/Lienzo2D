/* Generated By:JavaCC: Do not edit this line. ParserL2DConstants.java */
package org.esvux.lienzo2D.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserL2DConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 9;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 10;
  /** RegularExpression Id. */
  int ENTERO = 24;
  /** RegularExpression Id. */
  int DECIMAL = 25;
  /** RegularExpression Id. */
  int LIENZO = 26;
  /** RegularExpression Id. */
  int EXTIENDE = 27;
  /** RegularExpression Id. */
  int PUBLICO = 28;
  /** RegularExpression Id. */
  int PRIVADO = 29;
  /** RegularExpression Id. */
  int PROTEGIDO = 30;
  /** RegularExpression Id. */
  int VAR = 31;
  /** RegularExpression Id. */
  int ARREGLO = 32;
  /** RegularExpression Id. */
  int CONSERVAR = 33;
  /** RegularExpression Id. */
  int T_ENTERO = 34;
  /** RegularExpression Id. */
  int T_CADENA = 35;
  /** RegularExpression Id. */
  int T_CARACTER = 36;
  /** RegularExpression Id. */
  int T_BOOLEAN = 37;
  /** RegularExpression Id. */
  int T_DOBLE = 38;
  /** RegularExpression Id. */
  int TRUE = 39;
  /** RegularExpression Id. */
  int FALSE = 40;
  /** RegularExpression Id. */
  int SI = 41;
  /** RegularExpression Id. */
  int SINO = 42;
  /** RegularExpression Id. */
  int COMPROBAR = 43;
  /** RegularExpression Id. */
  int CASO = 44;
  /** RegularExpression Id. */
  int DEFECTO = 45;
  /** RegularExpression Id. */
  int PARA = 46;
  /** RegularExpression Id. */
  int MIENTRAS = 47;
  /** RegularExpression Id. */
  int HACER = 48;
  /** RegularExpression Id. */
  int CONTINUAR = 49;
  /** RegularExpression Id. */
  int SALIR = 50;
  /** RegularExpression Id. */
  int RETORNA = 51;
  /** RegularExpression Id. */
  int P_P = 52;
  /** RegularExpression Id. */
  int P_OR = 53;
  /** RegularExpression Id. */
  int P_S = 54;
  /** RegularExpression Id. */
  int PRINCIPAL = 55;
  /** RegularExpression Id. */
  int ORDENAR = 56;
  /** RegularExpression Id. */
  int TIPO = 57;
  /** RegularExpression Id. */
  int SUMARIZAR = 58;
  /** RegularExpression Id. */
  int ASCENDENTE = 59;
  /** RegularExpression Id. */
  int DESCENDENTE = 60;
  /** RegularExpression Id. */
  int PARES = 61;
  /** RegularExpression Id. */
  int IMPARES = 62;
  /** RegularExpression Id. */
  int PRIMOS = 63;
  /** RegularExpression Id. */
  int ID = 64;
  /** RegularExpression Id. */
  int CHAR = 65;
  /** RegularExpression Id. */
  int CADENA = 66;
  /** RegularExpression Id. */
  int AUMENTO = 67;
  /** RegularExpression Id. */
  int DECREMENTO = 68;
  /** RegularExpression Id. */
  int SUMA = 69;
  /** RegularExpression Id. */
  int RESTA = 70;
  /** RegularExpression Id. */
  int MULTIPLICACION = 71;
  /** RegularExpression Id. */
  int DIVISION = 72;
  /** RegularExpression Id. */
  int POTENCIA = 73;
  /** RegularExpression Id. */
  int OR = 74;
  /** RegularExpression Id. */
  int AND = 75;
  /** RegularExpression Id. */
  int NOR = 76;
  /** RegularExpression Id. */
  int NAND = 77;
  /** RegularExpression Id. */
  int XOR = 78;
  /** RegularExpression Id. */
  int NOT = 79;
  /** RegularExpression Id. */
  int IGUAL = 80;
  /** RegularExpression Id. */
  int DIFERENTE = 81;
  /** RegularExpression Id. */
  int MENOR = 82;
  /** RegularExpression Id. */
  int MAYOR = 83;
  /** RegularExpression Id. */
  int MENORIGUAL = 84;
  /** RegularExpression Id. */
  int MAYORIGUAL = 85;
  /** RegularExpression Id. */
  int NULO = 86;
  /** RegularExpression Id. */
  int AUMENTAR = 87;
  /** RegularExpression Id. */
  int DISMINUIR = 88;
  /** RegularExpression Id. */
  int FIN = 89;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 2;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\t\"",
    "\"\\r\"",
    "\">>\"",
    "<token of kind 6>",
    "\"<-\"",
    "<SINGLE_LINE_COMMENT>",
    "\"->\"",
    "\"->\"",
    "<token of kind 11>",
    "\"\\u00bf\"",
    "\"?\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"=\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\":\"",
    "\";\"",
    "<ENTERO>",
    "<DECIMAL>",
    "\"Lienzo\"",
    "\"Extiende\"",
    "\"publico\"",
    "\"privado\"",
    "\"protegido\"",
    "\"var\"",
    "\"arreglo\"",
    "\"Conservar\"",
    "\"entero\"",
    "\"cadena\"",
    "\"caracter\"",
    "\"boolean\"",
    "\"doble\"",
    "\"true\"",
    "\"false\"",
    "\"si\"",
    "\"sino\"",
    "\"comprobar\"",
    "\"caso\"",
    "\"defecto\"",
    "\"para\"",
    "\"mientras\"",
    "\"hacer\"",
    "\"Continuar\"",
    "\"Salir\"",
    "\"retorna\"",
    "\"Pintar_P\"",
    "\"Pintar_OR\"",
    "\"Pintar_S\"",
    "\"Principal\"",
    "\"Ordenar\"",
    "\"tipo\"",
    "\"Sumarizar\"",
    "\"ascendente\"",
    "\"descendente\"",
    "\"pares\"",
    "\"impares\"",
    "\"primos\"",
    "<ID>",
    "<CHAR>",
    "<CADENA>",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"||\"",
    "\"&&\"",
    "\"!||\"",
    "\"!&&\"",
    "\"&|\"",
    "\"!\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"!&\\u00a1\"",
    "\"+=\"",
    "\"-=\"",
    "\"$\"",
  };

}
