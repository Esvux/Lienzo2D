/* Generated By:JavaCC: Do not edit this line. ParserL2D.java */
package org.esvux.lienzo2D.parser;

import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.esvux.lienzo2D.AST.Lienzo;
import org.esvux.lienzo2D.AST.Nodo;
import org.esvux.lienzo2D.compilador.ManejadorErrores;
import org.esvux.lienzo2D.compilador.Tipos;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

public class ParserL2D implements ParserL2DConstants {

  // Control de ambito ;) 
  public Integer correlativo;
  public Integer nivel;
  public Integer padre;
  public Integer ultimo;
  public Lienzo lienzo;
  public Integer visibilidad;

    private void reportarError(String jsonString){
        try {
            JSONParser parser = new JSONParser();
            JSONObject error = (JSONObject) parser.parse(jsonString);
            String detalle = (String) error.get("detalle");
            Integer fila = Integer.parseInt(error.get("linea").toString());
            Integer columna = Integer.parseInt(error.get("columna").toString());
            JSONArray esperados = (JSONArray) error.get("esperados");
            detalle += "<br>";
            for (Object esperado : esperados.toArray()) {
                detalle += "<span class='esperado thin'>" + esperado + "</span>";
            }
            ManejadorErrores.getInstance().addErrorSintactico(fila, columna, detalle);
        } catch (org.json.simple.parser.ParseException ex) {
            Logger.getLogger(ParserL2D.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

  public static void main(String args[]) throws ParseException {
    ParserL2D parser = new ParserL2D(new java.io.StringReader(""
          +" publico Lienzo PetalosVerdes \u00bf \u005cn "
          +" publico var entero limiteX, limiteY = 60$ \u005cn "
          +" Conservar publico entero[] Hojas(entero x, doble y, cadena diametro)\u00bf \u005cn "
          +"     var entero arreglo a,B,C[2]={x,y}$ \u005cn "
          +"     var entero a=5$ \u005cn "
          +"     para(var doble x = 350; x < 500; x++)\u00bf \u005cn "
          +"       diametro++$  \u005cn "
          +"       Pintar_P(x , y -= 1, \u005c"#00CC00\u005c", diametro - 50)$  \u005cn "
          +"     ?  \u005cn "
          +"     y = 500$ \u005cn "
          +"     para(x=200; x<350; x++)\u00bf \u005cn "
          +"       diametro--$  \u005cn "
          +"       Pintar_P(x, y -= 1, \u005c"#00CC00\u005c", diametro + -50)$  \u005cn "
          +"     ?  \u005cn "
          +"     para(y=350; y<500; y++)\u00bf \u005cn "
          +"       diametro++$  \u005cn "
          +"       Pintar_P(x += 1, y , \u005c"#00CC00\u005c", diametro + -50)$ \u005cn "
          +"     ?  \u005cn "
          +"     x=200$ \u005cn "
          +"     para(y=200; y<350; y++)\u00bf \u005cn "
          +"       diametro--$  \u005cn "
          +"       Pintar_P(x += 1, y, \u005c"#00CC00\u005c", diametro - 50)$  \u005cn "
          +"     ?  \u005cn "
          +"     retorna a$ \u005cn "
          +"   ?  \u005cn "
          +" Conservar privado cadena print(cadena mensaje)\u00bf \u005cn "
          +"     var entero a=3,C,D, E=0$ \u005cn "
          +"     retorna mensaje$ \u005cn "
          +"   ?  \u005cn "
          +" ? \u005cn "));
    parser.CLASE();
    System.out.println("An\u00e1lisis concluido!!");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Lienzo CLASE() throws ParseException {
//  Lienzo lienzo = new Lienzo();
  Token token;
  this.visibilidad = Tipos.PUBLICO;
  ArrayList<Nodo> sentencias = new ArrayList<Nodo>();
  ArrayList<String> extendes = new ArrayList<String>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLICO:
    case PRIVADO:
    case PROTEGIDO:
      this.visibilidad = VISIBILIDAD();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(LIENZO);
    token = jj_consume_token(ID);
        this.lienzo = new Lienzo (token.image, visibilidad);
        // correlativo Se reinicia en cada método ;) 
        this.correlativo=1;
        // nivel aumenta en cada ¿ y disminuye al cerrar con ?, nivel 0 le pertenece a lienzo
        this.nivel=1;
        // padre hace referencia al ambito padre que se tendra en la tabla de símbolo ;) 
        this.padre=0;
        // ultimo sirve para almacenar el valor más alto de ambito creado ;) 
        this.ultimo=0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTIENDE:
      jj_consume_token(EXTIENDE);
      EXTENDES();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(12);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 20:
    case PUBLICO:
    case PRIVADO:
    case PROTEGIDO:
    case VAR:
    case CONSERVAR:
    case T_ENTERO:
    case T_CADENA:
    case T_CARACTER:
    case T_BOOLEAN:
    case T_DOBLE:
    case PRINCIPAL:
    case ID:
      SENTENCIAS();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(13);
    jj_consume_token(0);
    {if (true) return this.lienzo;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Integer VISIBILIDAD() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLICO:
      jj_consume_token(PUBLICO);
                  {if (true) return Tipos.PUBLICO;}
      break;
    case PRIVADO:
      jj_consume_token(PRIVADO);
                  {if (true) return Tipos.PRIVADO;}
      break;
    case PROTEGIDO:
      jj_consume_token(PROTEGIDO);
                  {if (true) return Tipos.PROTEGIDO;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public void EXTENDES() throws ParseException {
  Token token1, token2;
    token1 = jj_consume_token(ID);
    this.lienzo.generarExtend(token.image);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_1;
      }
      jj_consume_token(14);
      token2 = jj_consume_token(ID);
    this.lienzo.generarExtend(token.image);
    }
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public void SENTENCIAS() throws ParseException {
    SENTENCIA();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
      case PUBLICO:
      case PRIVADO:
      case PROTEGIDO:
      case VAR:
      case CONSERVAR:
      case T_ENTERO:
      case T_CADENA:
      case T_CARACTER:
      case T_BOOLEAN:
      case T_DOBLE:
      case PRINCIPAL:
      case ID:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      SENTENCIA();
    }
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public void SENTENCIA() throws ParseException {
  Nodo principal, metodo,  acciones, parametros, declaracion, dimensiones, id1, id2;
  Nodo valor = null;
  ArrayList<Nodo> ids = new ArrayList<Nodo>();
  Integer tempVisibilidad = this.visibilidad;
  Integer tipo = Tipos.T_VOID;
  Integer ambito = this.padre;
  Boolean conservar = false;
  Token token1, token2;
  Integer numDims = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 20:
    case PUBLICO:
    case PRIVADO:
    case PROTEGIDO:
    case VAR:
    case CONSERVAR:
    case T_ENTERO:
    case T_CADENA:
    case T_CARACTER:
    case T_BOOLEAN:
    case T_DOBLE:
    case ID:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSERVAR:
        jj_consume_token(CONSERVAR);
                conservar = true;
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLICO:
      case PRIVADO:
      case PROTEGIDO:
        this.visibilidad = VISIBILIDAD();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
      case T_ENTERO:
      case T_CADENA:
      case T_CARACTER:
      case T_BOOLEAN:
      case T_DOBLE:
      case ID:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case T_ENTERO:
        case T_CADENA:
        case T_CARACTER:
        case T_BOOLEAN:
        case T_DOBLE:
          tipo = TIPO();
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 20:
          numDims = L_CORCHETES();
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        token1 = jj_consume_token(ID);
        jj_consume_token(15);
        // Creando un nuevo ambito 
        this.ultimo++;
        // Actualizando como padre el nuevo ambito 
        this.padre=this.ultimo;
        // Iniciando el correlativo 
        this.correlativo = 1;
        // Agregando el método 
        // Aumentando el nivel 
        this.nivel++;
        parametros = PARAMS_DECLARACION();
        jj_consume_token(16);
        jj_consume_token(12);
        acciones = ACCIONES();
        jj_consume_token(13);
        // Regresando el ambito 
        this.padre=ambito;
        // Regresando el nivel 
        this.nivel--;
        // Creando el nuevo método 
        metodo = Nodo.crearMetodo(token1.image, tipo, ""+numDims, this.visibilidad, conservar, this.nivel, this.padre, this.correlativo,
          token1.beginLine, token1.beginColumn, parametros, acciones);
        // Regresando la visibilidad ** //
        this.visibilidad = tempVisibilidad;
        this.lienzo.agregarMetodo(metodo);
        break;
      case VAR:
        jj_consume_token(VAR);
        tipo = TIPO();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARREGLO:
          jj_consume_token(ARREGLO);
          token1 = jj_consume_token(ID);
          // Creando  un arreglo 
          id1 = Nodo.crearVariable(token1.image, tipo, this.visibilidad, conservar, this.padre, this.nivel, this.correlativo, Tipos.GLOBAL, token1.beginLine, token1.beginColumn);
          ids.add(id1);
          // Aumentar el correlativo 
          this.correlativo++;
          label_3:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 14:
              ;
              break;
            default:
              jj_la1[10] = jj_gen;
              break label_3;
            }
            jj_consume_token(14);
            token2 = jj_consume_token(ID);
          // Creando  un arreglo 
          id2 = Nodo.crearVariable(token2.image, tipo, this.visibilidad, conservar, this.padre, this.nivel, this.correlativo, Tipos.GLOBAL, token2.beginLine, token2.beginColumn);
          ids.add(id2);
          // Aumentar el correlativo 
          this.correlativo++;
          }
          dimensiones = DIMENSIONES();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 17:
            jj_consume_token(17);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 18:
              jj_consume_token(18);
              valor = ASIG_ARREGLO();
              jj_consume_token(19);
              break;
            case 15:
            case ENTERO:
            case DECIMAL:
            case TRUE:
            case FALSE:
            case ORDENAR:
            case SUMARIZAR:
            case ID:
            case CHAR:
            case CADENA:
            case RESTA:
            case NOT:
            case NULO:
              valor = EXPRESION();
              break;
            default:
              jj_la1[11] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[12] = jj_gen;
            ;
          }
          // Agregando nodo a declaración 
          declaracion = Nodo.crearDeclaracionArreglo(token1.beginLine, ids, dimensiones, valor);
          this.lienzo.agregarDeclaracion(declaracion);
          break;
        case ID:
          //Variable(s)
                  token1 = jj_consume_token(ID);
          // Creando  una variable 
          id1 = Nodo.crearVariable(token1.image, tipo, this.visibilidad, conservar, this.padre, this.nivel, this.correlativo, Tipos.GLOBAL, token1.beginLine, token1.beginColumn);
          ids.add(id1);
          // Aumentar el correlativo 
          this.correlativo++;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 17:
            jj_consume_token(17);
            valor = EXPRESION();
          declaracion = Nodo.crearDeclaracion(token1.beginLine, ids, valor);
          this.lienzo.agregarDeclaracion(declaracion);
          ids.clear();
          valor = null;
            break;
          default:
            jj_la1[13] = jj_gen;
            ;
          }
          label_4:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 14:
              ;
              break;
            default:
              jj_la1[14] = jj_gen;
              break label_4;
            }
            jj_consume_token(14);
            token2 = jj_consume_token(ID);
          // Creando  una variable 
          id2 = Nodo.crearVariable(token2.image, tipo, this.visibilidad, conservar, this.padre, this.nivel, this.correlativo, Tipos.GLOBAL, token2.beginLine, token2.beginColumn);
          ids.add(id2);
          // Aumentar el correlativo 
          this.correlativo++;
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 17:
              jj_consume_token(17);
              valor = EXPRESION();
          declaracion = Nodo.crearDeclaracion(token1.beginLine, ids, valor);
          this.lienzo.agregarDeclaracion(declaracion);
          ids.clear();
          valor = null;
              break;
            default:
              jj_la1[15] = jj_gen;
              ;
            }
          }
          if(!ids.isEmpty()){
            declaracion = Nodo.crearDeclaracion(token1.beginLine, ids, valor);
            this.lienzo.agregarDeclaracion(declaracion);
          }
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(FIN);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case PRINCIPAL:
      //Principal
        token1 = jj_consume_token(PRINCIPAL);
      jj_consume_token(15);
      jj_consume_token(16);
      jj_consume_token(12);
    // Creando un nuevo ambito 
    this.ultimo++;
    // Actualizando como padre el nuevo ambito 
    this.padre=this.ultimo;
    // Iniciando el correlativo 
    this.correlativo = 1;
    // Aumentando el nivel 
    this.nivel++;
      acciones = ACCIONES();
      jj_consume_token(13);
    // Agregando a principal 
    parametros = Nodo.crearTransicion (Tipos.PARAM_CREACION, "parametros", 0);
    principal = Nodo.crearPrincipal(token1.image, this.nivel, this.padre, token1.beginLine, token1.beginColumn, parametros, acciones);
    // Regresando el ambito 
    this.padre=ambito;
    // Regresando el nivel 
    this.nivel--;
    this.lienzo.agregarPrincipal(principal);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Integer L_CORCHETES() throws ParseException {
Integer dimensiones = 0;
    jj_consume_token(20);
    jj_consume_token(21);
            dimensiones = 1;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_5;
      }
      jj_consume_token(20);
      jj_consume_token(21);
                                           dimensiones += 1;
    }
                                                                   {if (true) return dimensiones;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo PARAMS_DECLARACION() throws ParseException {
  Nodo parametros = Nodo.crearTransicion (Tipos.PARAM_CREACION , "parametros", 0);
  Nodo parametro1, parametro2;
  Integer tipo=Tipos.NULL;
  Token token1, token2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_ENTERO:
    case T_CADENA:
    case T_CARACTER:
    case T_BOOLEAN:
    case T_DOBLE:
      tipo = TIPO();
      token1 = jj_consume_token(ID);
    parametro1 = Nodo.crearVariable(token1.image, tipo, this.visibilidad, false, this.padre, this.nivel, this.correlativo, Tipos.LOCAL, token1.beginLine, token1.beginColumn);
    // Aumentando el correlativo 
    this.correlativo++;
    parametros.agregarAParametros(parametro1);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 14:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_6;
        }
        jj_consume_token(14);
        tipo = TIPO();
        token2 = jj_consume_token(ID);
    parametro2 = Nodo.crearVariable(token2.image, tipo, this.visibilidad, false, this.padre, this.nivel, this.correlativo, Tipos.LOCAL, token2.beginLine, token2.beginColumn);
    // Aumentando el correlativo 
    this.correlativo++;
    parametros.addHijo(parametro2);
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    {if (true) return parametros;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo ACCIONES() throws ParseException {
  Nodo acciones = Nodo.crearTransicion(Tipos.ACCIONES, "acciones", 0);
  Nodo accion;
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLICO:
      case PRIVADO:
      case PROTEGIDO:
      case VAR:
      case CONSERVAR:
      case SI:
      case COMPROBAR:
      case PARA:
      case MIENTRAS:
      case HACER:
      case CONTINUAR:
      case SALIR:
      case RETORNA:
      case P_P:
      case P_OR:
      case P_S:
      case ORDENAR:
      case SUMARIZAR:
      case ID:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_7;
      }
      accion = ACCION();
                     acciones.agregarAAcciones(accion, this.lienzo.getNombre());
    }
    {if (true) return acciones;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo ACCION() throws ParseException {
  Nodo nodo;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLICO:
      case PRIVADO:
      case PROTEGIDO:
      case VAR:
      case CONSERVAR:
        nodo = DECLARACION();
        jj_consume_token(FIN);
                                                  {if (true) return nodo;}
        break;
      case ID:
        nodo = OPERACION();
        jj_consume_token(FIN);
                                                  {if (true) return nodo;}
        break;
      case SI:
        nodo = FLUJO_SI();
                                                {if (true) return nodo;}
        break;
      case COMPROBAR:
        nodo = FLUJO_COMPROBAR();
                                                {if (true) return nodo;}
        break;
      case PARA:
        nodo = BUCLE_PARA();
                                                {if (true) return nodo;}
        break;
      case MIENTRAS:
        nodo = BUCLE_MIENTRAS();
                                                {if (true) return nodo;}
        break;
      case HACER:
        nodo = BUCLE_HACER_MIENTRAS();
                                                {if (true) return nodo;}
        break;
      case CONTINUAR:
      case SALIR:
        nodo = ESCAPE();
        jj_consume_token(FIN);
                                                  {if (true) return nodo;}
        break;
      case ORDENAR:
      case SUMARIZAR:
        nodo = FUNCION_PRIMITIVA();
        jj_consume_token(FIN);
                                                  {if (true) return nodo;}
        break;
      case P_P:
      case P_OR:
      case P_S:
        nodo = PROCEDIMIENTO_PRIMITIVO();
        jj_consume_token(FIN);
                                                  {if (true) return nodo;}
        break;
      case RETORNA:
        nodo = RETORNO();
        jj_consume_token(FIN);
                                                  {if (true) return nodo;}
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != FIN);
        reportarError(e.getMessage());
        {if (true) return new Nodo();}
    }
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo DECLARACION() throws ParseException {
  Nodo declaraciones = Nodo.crearTransicion(Tipos.DECLARACIONES, "declaraciones", 0);
  ArrayList<Nodo> ids = new ArrayList<Nodo>();
  Nodo declaracion, dimensiones, id1, id2;
  Nodo valor = null;
  Integer visibilidad = this.visibilidad;
  Boolean conservar = false;
  Token token1, token2;
  Integer tipo = Tipos.NULL;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSERVAR:
      jj_consume_token(CONSERVAR);
                conservar = true;
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLICO:
    case PRIVADO:
    case PROTEGIDO:
      visibilidad = VISIBILIDAD();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(VAR);
    tipo = TIPO();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARREGLO:
      jj_consume_token(ARREGLO);
      token1 = jj_consume_token(ID);
          // Creando  un arreglo 
          id1 = Nodo.crearVariable(token1.image, tipo, visibilidad, conservar, this.padre, this.nivel, this.correlativo, Tipos.LOCAL, token1.beginLine, token1.beginColumn);
          ids.add(id1);
          // Aumentar el correlativo 
          this.correlativo++;
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 14:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_8;
        }
        jj_consume_token(14);
        token2 = jj_consume_token(ID);
          // Creando  un arreglo 
          id2 = Nodo.crearVariable(token2.image, tipo, visibilidad, conservar, this.padre, this.nivel, this.correlativo, Tipos.LOCAL, token2.beginLine, token2.beginColumn);
          ids.add(id2);
          // Aumentar el correlativo 
          this.correlativo++;
      }
      dimensiones = DIMENSIONES();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
        jj_consume_token(17);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 18:
          jj_consume_token(18);
          valor = ASIG_ARREGLO();
          jj_consume_token(19);
          break;
        case 15:
        case ENTERO:
        case DECIMAL:
        case TRUE:
        case FALSE:
        case ORDENAR:
        case SUMARIZAR:
        case ID:
        case CHAR:
        case CADENA:
        case RESTA:
        case NOT:
        case NULO:
          valor = EXPRESION();
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
          // Agregando nodo a declaración 
          declaracion = Nodo.crearDeclaracionArreglo(token1.beginLine, ids, dimensiones, valor);
          declaraciones.agregarADeclaracion(declaracion);
          {if (true) return declaraciones;}
      break;
    case ID:
      //Variable(s)
              token1 = jj_consume_token(ID);
          // Creando  una variable 
          id1 = Nodo.crearVariable(token1.image, tipo, visibilidad, conservar, this.padre, this.nivel, this.correlativo, Tipos.LOCAL, token1.beginLine, token1.beginColumn);
          ids.add(id1);
          // Aumentar el correlativo 
          this.correlativo++;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
        jj_consume_token(17);
        valor = EXPRESION();
          declaracion = Nodo.crearDeclaracion(token1.beginLine, ids, valor);
          declaraciones.agregarADeclaracion(declaracion);
          ids.clear();
          valor = null;
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 14:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_9;
        }
        jj_consume_token(14);
        token2 = jj_consume_token(ID);
          // Creando  una variable 
          id2 = Nodo.crearVariable(token2.image, tipo, visibilidad, conservar, this.padre, this.nivel, this.correlativo, Tipos.LOCAL, token2.beginLine, token2.beginColumn);
          ids.add(id2);
          // Aumentar el correlativo 
          this.correlativo++;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 17:
          jj_consume_token(17);
          valor = EXPRESION();
          declaracion = Nodo.crearDeclaracion(token1.beginLine, ids, valor);
          declaraciones.agregarADeclaracion(declaracion);
          ids.clear();
          valor = null;
          break;
        default:
          jj_la1[31] = jj_gen;
          ;
        }
      }
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if(ids.isEmpty()){
      {if (true) return declaraciones;}
    }
    declaracion = Nodo.crearDeclaracion(token1.beginLine, ids, valor);
    declaraciones.agregarADeclaracion(declaracion);
    {if (true) return declaraciones;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo DIMENSIONES() throws ParseException {
  Nodo dimensiones = Nodo.crearTransicion (Tipos.DIMENSION, "dimensiones", 0);
  Nodo temp1, temp2;
    jj_consume_token(20);
    temp1 = EXPRESION();
    jj_consume_token(21);
                               dimensiones.agregarADimension(temp1);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_10;
      }
      jj_consume_token(20);
      temp2 = EXPRESION();
      jj_consume_token(21);
                               dimensiones.addHijo(temp2);
    }
    {if (true) return dimensiones;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo ASIG_ARREGLO() throws ParseException {
  Nodo asignacion = Nodo.crearAsignacionArreglo("{}", Tipos.ARREGLO, 0);
  Nodo temp1, temp2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
      jj_consume_token(18);
      temp1 = ASIG_ARREGLO();
      jj_consume_token(19);
                                      asignacion.agregarAAsignacion(temp1);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 14:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_11;
        }
        jj_consume_token(14);
        jj_consume_token(18);
        temp2 = ASIG_ARREGLO();
        jj_consume_token(19);
                                      asignacion.addHijo(temp2);
      }
    {if (true) return asignacion;}
      break;
    case 15:
    case ENTERO:
    case DECIMAL:
    case TRUE:
    case FALSE:
    case ORDENAR:
    case SUMARIZAR:
    case ID:
    case CHAR:
    case CADENA:
    case RESTA:
    case NOT:
    case NULO:
      temp1 = EXPRESION();
                           asignacion.agregarAAsignacion(temp1);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 14:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_12;
        }
        jj_consume_token(14);
        temp2 = EXPRESION();
                           asignacion.addHijo(temp2);
      }
    {if (true) return asignacion;}
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo OPERACION() throws ParseException {
  Nodo operacion, variable, dimensiones, valor, parametros;
  Token token, operador;
    token = jj_consume_token(ID);
                  variable = Nodo.crearID(token.image, token.beginLine, token.beginColumn);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 20:
      dimensiones = DIMENSIONES();
                  variable = Nodo.crearArreglo(token.image, token.beginLine, token.beginColumn, dimensiones);
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AUMENTAR:
    case DISMINUIR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AUMENTAR:
        operador = jj_consume_token(AUMENTAR);
        break;
      case DISMINUIR:
        operador = jj_consume_token(DISMINUIR);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      valor = EXPRESION();
            operacion = Nodo.crearAsignacion(operador.image, operador.beginLine, operador.beginColumn, variable, valor);
            {if (true) return operacion;}
      break;
    case AUMENTO:
    case DECREMENTO:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AUMENTO:
        operador = jj_consume_token(AUMENTO);
        break;
      case DECREMENTO:
        operador = jj_consume_token(DECREMENTO);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            operacion = Nodo.crearOperacionUnaria(Tipos.ARITMETICA, operador.image, operador.beginLine, operador.beginColumn, variable);
            {if (true) return operacion;}
      break;
    case 17:
      jj_consume_token(17);
      valor = EXPRESION();
            operacion = Nodo.crearAsignacion ("=", variable.getFila(), variable.getColumna(), variable, valor);
            {if (true) return operacion;}
      break;
    case 15:
      jj_consume_token(15);
      parametros = PARAMS();
      jj_consume_token(16);
            operacion = Nodo.crearLlamada(token.image, token.beginLine, token.beginColumn, parametros);
            {if (true) return operacion;}
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo PARAMS() throws ParseException {
  Nodo parametros = Nodo.crearTransicion (Tipos.PARAM_LLAMADA, "parametros", 0);
  Nodo param1, param2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
    case ENTERO:
    case DECIMAL:
    case TRUE:
    case FALSE:
    case ORDENAR:
    case SUMARIZAR:
    case ID:
    case CHAR:
    case CADENA:
    case RESTA:
    case NOT:
    case NULO:
      param1 = EXPRESION();
                         parametros.agregarAParametros(param1);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 14:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_13;
        }
        jj_consume_token(14);
        param2 = EXPRESION();
                              parametros.agregarAParametros(param2);
      }
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    {if (true) return parametros;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo FLUJO_SI() throws ParseException {
  Nodo flujo, condicion, accionesSi;
  Nodo accionesSino = null;
  Token token;
  // Guardando la referencia al padre 
  Integer ambito = this.padre;
  // Aumentando el nivel 
  this.nivel++;
    token = jj_consume_token(SI);
    jj_consume_token(15);
    condicion = EXPRESION();
    jj_consume_token(16);
    jj_consume_token(12);
    // Creando un nuevo ambito 
    this.ultimo++;
    // Actualizando como padre el nuevo ambito 
    this.padre=this.ultimo;
    accionesSi = ACCIONES();
    jj_consume_token(13);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SINO:
      jj_consume_token(SINO);
      jj_consume_token(12);
    // Creando un nuevo ambito 
    this.ultimo++;
    // Actualizando como padre el nuevo ambito 
    this.padre=this.ultimo;
      accionesSino = ACCIONES();
      jj_consume_token(13);
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    flujo = Nodo.crearFlujoSi(token.image, token.beginLine, token.beginColumn, condicion, accionesSi, accionesSino);
    // regresando el nivel 
    this.nivel--;
    // regresando al padre 
    this.padre = ambito;
    {if (true) return flujo;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo FLUJO_COMPROBAR() throws ParseException {
  Nodo flujo, casos;
  Token token;
  // Guardando la referencia al padre 
  Integer ambito = this.padre;
  // Creando un nuevo ambito 
  this.ultimo++;
  // Actualizando como padre el nuevo ambito 
  this.padre=this.ultimo;
    jj_consume_token(COMPROBAR);
    jj_consume_token(15);
    token = jj_consume_token(ID);
    jj_consume_token(16);
    jj_consume_token(12);
    // aumentando el nivel 
    this.nivel++;
    casos = CASOS();
    jj_consume_token(13);
    flujo = Nodo.crearFlujo(Tipos.FLUJO_COMPROBAR, token.image, token.beginLine, token.beginColumn, casos);
    // regresando el nivel 
    this.nivel--;
    // regresando al padre 
    this.padre = ambito;
    {if (true) return flujo;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo CASOS() throws ParseException {
  Token token;
  Nodo casos = Nodo.crearTransicion(Tipos.CASOS, "casos", 0);
  Nodo caso, defecto, expresion;
  Nodo acciones = null;
  // Aumentando el nivel 
  this.nivel++;
    label_14:
    while (true) {
      token = jj_consume_token(CASO);
      expresion = EXPRESION();
      jj_consume_token(22);
      acciones = ACCIONES();
      caso = Nodo.crearCaso(token.image, token.beginLine, token.beginColumn, expresion, acciones);
      casos.agregarACasos(caso);
      acciones = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASO:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_14;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFECTO:
      token = jj_consume_token(DEFECTO);
      jj_consume_token(22);
      acciones = ACCIONES();
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
      defecto = Nodo.crearDefecto(token.image, token.beginLine, token.beginColumn, acciones);
      casos.agregarACasos(defecto);
      // regresando el nivel 
      this.nivel--;
      {if (true) return casos;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo BUCLE_PARA() throws ParseException {
  Nodo bucle, valorIni, valorFin, valor, incremento, acciones;
  Token token;
  // Guardando la referencia al padre 
  Integer ambito = this.padre;
  // Creando un nuevo ambito 
  this.ultimo++;
  // Actualizando como padre el nuevo ambito 
  this.padre=this.ultimo;
    token = jj_consume_token(PARA);
    // aumentando el nivel 
    this.nivel++;
    jj_consume_token(15);
    valorIni = ASIGNACION_PARA();
    jj_consume_token(23);
    valorFin = EXPRESION();
    jj_consume_token(23);
    incremento = EXPRESION();
    jj_consume_token(16);
    jj_consume_token(12);
    acciones = ACCIONES();
    jj_consume_token(13);
    bucle = Nodo.crearBucle(Tipos.BUCLE_PARA, token.image, token.beginLine, token.beginColumn, valorIni, valorFin, incremento, acciones );
    // regresando el nivel 
    this.nivel--;
    // regresando al padre 
    this.padre = ambito;
    {if (true) return bucle;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo ASIGNACION_PARA() throws ParseException {
  Nodo asignacion, declaracion, variable, valor;
  Integer tipo = Tipos.NULL;
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      tipo = TIPO();
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    token = jj_consume_token(ID);
    jj_consume_token(17);
    valor = EXPRESION();
    if(tipo != Tipos.NULL){
      variable = Nodo.crearVariable(token.image, tipo, this.visibilidad, false, this.padre, this.nivel, this.correlativo, Tipos.LOCAL, token.beginLine, token.beginColumn);
      declaracion = Nodo.crearDeclaracion(Tipos.VARIABLE, token.beginLine, variable, valor);
      // Aumentar el correlativo
      this.correlativo++;
      {if (true) return declaracion;}
    }else{
      variable = Nodo.crearID(token.image, token.beginLine, token.beginColumn);
      asignacion = Nodo.crearAsignacion("=", token.beginLine, token.beginColumn, variable, valor);
      {if (true) return asignacion;}
    }
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo BUCLE_MIENTRAS() throws ParseException {
  Nodo bucle, condicion, acciones;
  Token token;
  // Guardando la referencia al padre 
  Integer ambito = this.padre;
  // Creando un nuevo ambito 
  this.ultimo++;
  // Actualizando como padre el nuevo ambito 
  this.padre=this.ultimo;
    token = jj_consume_token(MIENTRAS);
    jj_consume_token(15);
    condicion = EXPRESION();
    jj_consume_token(16);
    jj_consume_token(12);
    // aumentando el nivel 
    this.nivel++;
    acciones = ACCIONES();
    jj_consume_token(13);
    bucle = Nodo.crearBucle(Tipos.BUCLE_MIENTRAS, token.image,  token.beginLine, token.beginColumn, condicion, acciones);
    // regresando el nivel 
    this.nivel--;
    // regresando al padre 
    this.padre = ambito;
    {if (true) return bucle;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo BUCLE_HACER_MIENTRAS() throws ParseException {
  Nodo bucle, condicion, acciones;
  Token token;
  // Guardando la referencia al padre 
  Integer ambito = this.padre;
  // Creando un nuevo ambito 
  this.ultimo++;
  // Actualizando como padre el nuevo ambito 
  this.padre=this.ultimo;
    token = jj_consume_token(HACER);
    jj_consume_token(12);
    // aumentando el nivel 
    this.nivel++;
    acciones = ACCIONES();
    jj_consume_token(13);
    jj_consume_token(MIENTRAS);
    jj_consume_token(15);
    condicion = EXPRESION();
    jj_consume_token(16);
    jj_consume_token(FIN);
    bucle = Nodo.crearBucle(Tipos.BUCLE_HACER, token.image, token.beginLine, token.beginColumn, condicion, acciones);
    // regresando el nivel 
    this.nivel--;
    // regresando al padre 
    this.padre = ambito;
    {if (true) return bucle;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo ESCAPE() throws ParseException {
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SALIR:
      token = jj_consume_token(SALIR);
                         {if (true) return Nodo.crearEscape(Tipos.SALIR, token.image, token.beginLine, token.beginColumn);}
      break;
    case CONTINUAR:
      token = jj_consume_token(CONTINUAR);
                         {if (true) return Nodo.crearEscape(Tipos.CONTINUAR, token.image, token.beginLine, token.beginColumn);}
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Integer TIPO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_ENTERO:
      jj_consume_token(T_ENTERO);
                  {if (true) return Tipos.T_ENTERO;}
      break;
    case T_DOBLE:
      jj_consume_token(T_DOBLE);
                  {if (true) return Tipos.T_DOBLE;}
      break;
    case T_CARACTER:
      jj_consume_token(T_CARACTER);
                  {if (true) return Tipos.T_CARACTER;}
      break;
    case T_CADENA:
      jj_consume_token(T_CADENA);
                  {if (true) return Tipos.T_CADENA;}
      break;
    case T_BOOLEAN:
      jj_consume_token(T_BOOLEAN);
                  {if (true) return Tipos.T_BOOLEAN;}
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo PROCEDIMIENTO_PRIMITIVO() throws ParseException {
  Nodo procedimiento, posX, posY, color, diametro, alto, ancho, figura, texto;
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case P_P:
      token = jj_consume_token(P_P);
      jj_consume_token(15);
      posX = EXPRESION();
      jj_consume_token(14);
      posY = EXPRESION();
      jj_consume_token(14);
      color = EXPRESION();
      jj_consume_token(14);
      diametro = EXPRESION();
      jj_consume_token(16);
    procedimiento = Nodo.crearProcedimiento(Tipos.PINTAR_P, token.image, token.beginLine, token.beginColumn, posX, posY, color, diametro);
    {if (true) return procedimiento;}
      break;
    case P_OR:
      token = jj_consume_token(P_OR);
      jj_consume_token(15);
      posX = EXPRESION();
      jj_consume_token(14);
      posY = EXPRESION();
      jj_consume_token(14);
      color = EXPRESION();
      jj_consume_token(14);
      ancho = EXPRESION();
      jj_consume_token(14);
      alto = EXPRESION();
      jj_consume_token(14);
      figura = EXPRESION();
      jj_consume_token(16);
    procedimiento = Nodo.crearProcedimiento(Tipos.PINTAR_OR, token.image, token.beginLine, token.beginColumn, posX, posY, color, ancho, alto, figura);
    {if (true) return procedimiento;}
      break;
    case P_S:
      token = jj_consume_token(P_S);
      jj_consume_token(15);
      posX = EXPRESION();
      jj_consume_token(14);
      posY = EXPRESION();
      jj_consume_token(14);
      color = EXPRESION();
      jj_consume_token(14);
      texto = EXPRESION();
      jj_consume_token(16);
    procedimiento = Nodo.crearProcedimiento(Tipos.PINTAR_S, token.image, token.beginLine, token.beginColumn, posX, posY, color, texto);
    {if (true) return procedimiento;}
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo FUNCION_PRIMITIVA() throws ParseException {
  Nodo funcion, hijo;
  Token token, tipoFuncion;
  String orden;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDENAR:
      tipoFuncion = jj_consume_token(ORDENAR);
      jj_consume_token(15);
      jj_consume_token(ARREGLO);
      token = jj_consume_token(ID);
      jj_consume_token(14);
      jj_consume_token(TIPO);
      orden = ORDENAMIENTO();
      jj_consume_token(16);
    hijo = Nodo.crearID(token.image, token.beginLine, token.beginColumn);
    funcion = Nodo.crearFuncion(Tipos.ORDENAR, orden, tipoFuncion.beginLine, tipoFuncion.beginColumn, hijo);
    {if (true) return funcion;}
      break;
    case SUMARIZAR:
      tipoFuncion = jj_consume_token(SUMARIZAR);
      jj_consume_token(15);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        //Nombre de un arreglo
              token = jj_consume_token(ID);
        hijo = Nodo.crearID(token.image, token.beginLine, token.beginColumn);
        funcion = Nodo.crearFuncion(Tipos.SUMARIZAR, "sumarizar", tipoFuncion.beginLine, tipoFuncion.beginColumn, hijo);
        break;
      case 18:
        jj_consume_token(18);
        hijo = ASIG_ARREGLO();
        jj_consume_token(19);
        funcion = Nodo.crearFuncion(Tipos.SUMARIZAR, "sumarizar", tipoFuncion.beginLine, tipoFuncion.beginColumn, hijo);
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(16);
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return funcion;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public String ORDENAMIENTO() throws ParseException {
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASCENDENTE:
      token = jj_consume_token(ASCENDENTE);
                            {if (true) return token.image;}
      break;
    case DESCENDENTE:
      token = jj_consume_token(DESCENDENTE);
                            {if (true) return token.image;}
      break;
    case PARES:
      token = jj_consume_token(PARES);
                            {if (true) return token.image;}
      break;
    case IMPARES:
      token = jj_consume_token(IMPARES);
                            {if (true) return token.image;}
      break;
    case PRIMOS:
      token = jj_consume_token(PRIMOS);
                            {if (true) return token.image;}
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo RETORNO() throws ParseException {
  Nodo operacion, expresion;
  Token token;
    token = jj_consume_token(RETORNA);
    expresion = EXPRESION();
    operacion = Nodo.crearRetorna(token.image, token.beginLine, token.beginColumn, expresion);
    {if (true) return operacion;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo EXPRESION() throws ParseException {
  Nodo operacion, hijo;
    hijo = LOG1();
    operacion = Nodo.crearTransicion(Tipos.EXPRESION, "expresion", hijo.getFila());
    operacion.addHijo(hijo);
    {if (true) return operacion;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo LOG1() throws ParseException {
  Nodo operacion, izq, der;
  Token operador;
    operacion = LOG2();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
      case NOR:
      case XOR:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        //OR
              operador = jj_consume_token(OR);
        der = LOG2();
        izq = Nodo.duplicar(operacion);
        operacion = Nodo.crearOperacionBinaria(Tipos.LOGICA, operador.image, operador.beginLine, operador.beginColumn, izq, der);
        break;
      case NOR:
        //NOR
              operador = jj_consume_token(NOR);
        der = LOG2();
        izq = Nodo.duplicar(operacion);
        operacion = Nodo.crearOperacionBinaria(Tipos.LOGICA, operador.image, operador.beginLine, operador.beginColumn, izq, der);
        break;
      case XOR:
        //XOR
              operador = jj_consume_token(XOR);
        der = LOG2();
        izq = Nodo.duplicar(operacion);
        operacion = Nodo.crearOperacionBinaria(Tipos.LOGICA, operador.image, operador.beginLine, operador.beginColumn, izq, der);
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return operacion;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo LOG2() throws ParseException {
  Nodo operacion, izq, der;
  Token operador;
    operacion = LOG3();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case NAND:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        //AND
              operador = jj_consume_token(AND);
        der = LOG3();
        izq = Nodo.duplicar(operacion);
        operacion = Nodo.crearOperacionBinaria(Tipos.LOGICA, operador.image, operador.beginLine, operador.beginColumn, izq, der);
        break;
      case NAND:
        //NAND
              operador = jj_consume_token(NAND);
        der = LOG3();
        izq = Nodo.duplicar(operacion);
        operacion = Nodo.crearOperacionBinaria(Tipos.LOGICA, operador.image, operador.beginLine, operador.beginColumn, izq, der);
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return operacion;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo LOG3() throws ParseException {
  Nodo operacion, izq;
  Token operador = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      operador = jj_consume_token(NOT);
      break;
    default:
      jj_la1[57] = jj_gen;
      ;
    }
    izq = REL1();
    if(operador == null){
      {if (true) return izq;}
    }
    operacion = Nodo.crearOperacionUnaria(Tipos.LOGICA, operador.image, operador.beginLine, operador.beginColumn, izq);
    {if (true) return operacion;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo REL1() throws ParseException {
  Nodo operacion, izq, der;
  Token operador;
    operacion = REL2();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
      case DIFERENTE:
      case AUMENTAR:
      case DISMINUIR:
        ;
        break;
      default:
        jj_la1[58] = jj_gen;
        break label_17;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AUMENTAR:
        //Incremento Inmediato
              operador = jj_consume_token(AUMENTAR);
        der = REL2();
        izq = Nodo.duplicar(operacion);
        operacion = Nodo.crearAsignacion(operador.image, operador.beginLine, operador.beginColumn, izq, der);
        break;
      case DISMINUIR:
        //Decremento Inmediato
              operador = jj_consume_token(DISMINUIR);
        der = REL2();
        izq = Nodo.duplicar(operacion);
        operacion = Nodo.crearAsignacion(operador.image, operador.beginLine, operador.beginColumn, izq, der);
        break;
      case IGUAL:
        //Igualación
              operador = jj_consume_token(IGUAL);
        der = REL2();
        izq = Nodo.duplicar(operacion);
        operacion = Nodo.crearOperacionBinaria(Tipos.RELACIONAL, operador.image, operador.beginLine, operador.beginColumn, izq, der);
        break;
      case DIFERENTE:
        //Diferenciación
              operador = jj_consume_token(DIFERENTE);
        der = REL2();
        izq = Nodo.duplicar(operacion);
        operacion = Nodo.crearOperacionBinaria(Tipos.RELACIONAL, operador.image, operador.beginLine, operador.beginColumn, izq, der);
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return operacion;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo REL2() throws ParseException {
  Nodo operacion, izq, der;
  Token operador;
    operacion = REL3();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MENOR:
      case MAYOR:
      case MENORIGUAL:
      case MAYORIGUAL:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_18;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MENOR:
        //Menor
              operador = jj_consume_token(MENOR);
        der = REL3();
        izq = Nodo.duplicar(operacion);
        operacion = Nodo.crearOperacionBinaria(Tipos.RELACIONAL, operador.image, operador.beginLine, operador.beginColumn, izq, der);
        break;
      case MENORIGUAL:
        //Menor o Igual
              operador = jj_consume_token(MENORIGUAL);
        der = REL3();
        izq = Nodo.duplicar(operacion);
        operacion = Nodo.crearOperacionBinaria(Tipos.RELACIONAL, operador.image, operador.beginLine, operador.beginColumn, izq, der);
        break;
      case MAYOR:
        //Mayor
              operador = jj_consume_token(MAYOR);
        der = REL3();
        izq = Nodo.duplicar(operacion);
        operacion = Nodo.crearOperacionBinaria(Tipos.RELACIONAL, operador.image, operador.beginLine, operador.beginColumn, izq, der);
        break;
      case MAYORIGUAL:
        //Mayor o Igual
              operador = jj_consume_token(MAYORIGUAL);
        der = REL3();
        izq = Nodo.duplicar(operacion);
        operacion = Nodo.crearOperacionBinaria(Tipos.RELACIONAL, operador.image, operador.beginLine, operador.beginColumn, izq, der);
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return operacion;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo REL3() throws ParseException {
  Nodo operacion, izq;
  Token operador = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULO:
      operador = jj_consume_token(NULO);
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
    izq = ARIT1();
    if(operador == null){
      {if (true) return izq;}
    }
    operacion = Nodo.crearOperacionUnaria(Tipos.RELACIONAL, operador.image, operador.beginLine, operador.beginColumn, izq);
    {if (true) return operacion;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo ARIT1() throws ParseException {
  Nodo operacion, izq, der;
  Token operador;
    operacion = ARIT2();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
      case RESTA:
        ;
        break;
      default:
        jj_la1[63] = jj_gen;
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
        //Suma
              operador = jj_consume_token(SUMA);
        der = ARIT2();
        izq = Nodo.duplicar(operacion);
        operacion = Nodo.crearOperacionBinaria(Tipos.ARITMETICA, operador.image, operador.beginLine, operador.beginColumn, izq, der);
        break;
      case RESTA:
        //Resta
              operador = jj_consume_token(RESTA);
        der = ARIT2();
        izq = Nodo.duplicar(operacion);
        operacion = Nodo.crearOperacionBinaria(Tipos.ARITMETICA, operador.image, operador.beginLine, operador.beginColumn, izq, der);
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return operacion;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo ARIT2() throws ParseException {
  Nodo operacion, izq, der;
  Token operador;
    operacion = ARIT3();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICACION:
      case DIVISION:
        ;
        break;
      default:
        jj_la1[65] = jj_gen;
        break label_20;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIVISION:
        //División
              operador = jj_consume_token(DIVISION);
        der = ARIT3();
        izq = Nodo.duplicar(operacion);
        operacion = Nodo.crearOperacionBinaria(Tipos.ARITMETICA, operador.image, operador.beginLine, operador.beginColumn, izq, der);
        break;
      case MULTIPLICACION:
        //Multiplicación
              operador = jj_consume_token(MULTIPLICACION);
        der = ARIT3();
        izq = Nodo.duplicar(operacion);
        operacion = Nodo.crearOperacionBinaria(Tipos.ARITMETICA, operador.image, operador.beginLine, operador.beginColumn, izq, der);
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return operacion;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo ARIT3() throws ParseException {
  Nodo operacion, izq, der;
  Token operador;
    operacion = VALOR();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POTENCIA:
        ;
        break;
      default:
        jj_la1[67] = jj_gen;
        break label_21;
      }
      //Potencia
            operador = jj_consume_token(POTENCIA);
      der = VALOR();
        izq = Nodo.duplicar(operacion);
        operacion = Nodo.crearOperacionBinaria(Tipos.ARITMETICA, operador.image, operador.beginLine, operador.beginColumn, izq, der);
    }
    {if (true) return operacion;}
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo VALOR() throws ParseException {
  Token token, operador;
  Nodo operacion, valor, parametros, dimensiones;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      jj_consume_token(15);
      valor = EXPRESION();
      jj_consume_token(16);
                                {if (true) return valor;}
      break;
    case ORDENAR:
    case SUMARIZAR:
      valor = FUNCION_PRIMITIVA();
                                {if (true) return valor;}
      break;
    case ID:
      token = jj_consume_token(ID);
    valor = Nodo.crearID(token.image, token.beginLine, token.beginColumn);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
      case 20:
      case AUMENTO:
      case DECREMENTO:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AUMENTO:
        case DECREMENTO:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AUMENTO:
            operador = jj_consume_token(AUMENTO);
            break;
          case DECREMENTO:
            operador = jj_consume_token(DECREMENTO);
            break;
          default:
            jj_la1[68] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        operacion = Nodo.crearOperacionUnaria(Tipos.ARITMETICA, operador.image, operador.beginLine, operador.beginColumn, valor);
        {if (true) return operacion;}
          break;
        case 20:
          //Arreglo
                dimensiones = DIMENSIONES();
          valor = Nodo.crearArreglo(token.image, token.beginLine, token.beginColumn, dimensiones);
          {if (true) return valor;}
          break;
        case 15:
          jj_consume_token(15);
          parametros = PARAMS();
          jj_consume_token(16);
          valor = Nodo.crearLlamada(token.image, token.beginLine, token.beginColumn, parametros);
          {if (true) return valor;}
          break;
        default:
          jj_la1[69] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[70] = jj_gen;
        ;
      }
    {if (true) return valor;}
      break;
    case ENTERO:
    case DECIMAL:
    case TRUE:
    case FALSE:
    case CHAR:
    case CADENA:
    case RESTA:
      valor = PUNTUAL();
                      {if (true) return valor;}
      break;
    default:
      jj_la1[71] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// <> <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  
  final public Nodo PUNTUAL() throws ParseException {
  Token token;
  Nodo terminal;
  String sinComillas;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTERO:
      token = jj_consume_token(ENTERO);
                    terminal = Nodo.crearTerminal(Tipos.ENTERO, Tipos.T_ENTERO, token.image, token.image, token.beginLine, token.beginColumn);
                    {if (true) return terminal;}
      break;
    case DECIMAL:
      token = jj_consume_token(DECIMAL);
                    terminal = Nodo.crearTerminal(Tipos.DOBLE, Tipos.T_DOBLE, token.image, token.image, token.beginLine, token.beginColumn);
                    {if (true) return terminal;}
      break;
    case RESTA:
      jj_consume_token(RESTA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENTERO:
        token = jj_consume_token(ENTERO);
                    terminal = Nodo.crearTerminal(Tipos.ENTERO, Tipos.T_ENTERO, "-"+token.image, token.image, token.beginLine, token.beginColumn);
                    {if (true) return terminal;}
        break;
      case DECIMAL:
        token = jj_consume_token(DECIMAL);
                    terminal = Nodo.crearTerminal(Tipos.DOBLE, Tipos.T_DOBLE, "-"+token.image, token.image, token.beginLine, token.beginColumn);
                    {if (true) return terminal;}
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case TRUE:
      token = jj_consume_token(TRUE);
                    terminal = Nodo.crearTerminal(Tipos.TRUE, Tipos.T_BOOLEAN, token.image, token.image, token.beginLine, token.beginColumn);
                    {if (true) return terminal;}
      break;
    case FALSE:
      token = jj_consume_token(FALSE);
                    terminal = Nodo.crearTerminal(Tipos.FALSE, Tipos.T_BOOLEAN, token.image, token.image, token.beginLine, token.beginColumn);
                    {if (true) return terminal;}
      break;
    case CHAR:
      token = jj_consume_token(CHAR);
                    sinComillas = (token.image).replace("\u005c'", "");
                    terminal = Nodo.crearTerminal(Tipos.CARACTER, Tipos.T_CARACTER, sinComillas, sinComillas, token.beginLine, token.beginColumn);
                    {if (true) return terminal;}
      break;
    case CADENA:
      token = jj_consume_token(CADENA);
                    sinComillas = (token.image).replace("\u005c"", "");
                    terminal = Nodo.crearTerminal(Tipos.CADENA, Tipos.T_CADENA, sinComillas, sinComillas, token.beginLine, token.beginColumn);
                    {if (true) return terminal;}
      break;
    default:
      jj_la1[73] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserL2DTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[74];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x70000000,0x8000000,0xf0100000,0x70000000,0x4000,0xf0100000,0x0,0x70000000,0x0,0x100000,0x4000,0x3048000,0x20000,0x20000,0x4000,0x20000,0x0,0x80100000,0xf0100000,0x100000,0x4000,0x0,0xf0000000,0xf0000000,0x0,0x70000000,0x4000,0x3048000,0x20000,0x20000,0x4000,0x20000,0x0,0x100000,0x4000,0x4000,0x3048000,0x100000,0x0,0x0,0x28000,0x4000,0x3008000,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x108000,0x108000,0x3008000,0x3000000,0x3000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x80007e,0x0,0x0,0x80007e,0x2,0x0,0x7c,0x0,0x0,0x5000180,0x0,0x0,0x0,0x0,0x1,0x7c,0x80007e,0x0,0x0,0x7c,0x57fca02,0x57fca02,0x2,0x0,0x0,0x5000180,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x5000180,0x0,0x0,0x0,0x0,0x0,0x5000180,0x400,0x1000,0x2000,0x0,0x60000,0x7c,0x700000,0x0,0x5000000,0xf8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5000180,0x0,0x180,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x408047,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x408047,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x408047,0x0,0x1800000,0x18,0x1800018,0x0,0x408047,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x5400,0x5400,0x2800,0x2800,0x8000,0x1830000,0x1830000,0x3c0000,0x3c0000,0x400000,0x60,0x60,0x180,0x180,0x200,0x18,0x18,0x18,0x47,0x0,0x46,};
   }

  /** Constructor with InputStream. */
  public ParserL2D(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserL2D(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserL2DTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 74; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 74; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ParserL2D(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserL2DTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 74; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 74; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ParserL2D(ParserL2DTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 74; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserL2DTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 74; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[90];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 74; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 90; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
